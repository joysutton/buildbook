# Project Requirements and Schemas

## 1. Project Overview
- This is a project to manage sewing projects that are intended for entering on competitoions. 
    This application will allow users to create new projects, add information and media related to them, 
    create tasks associated with that project and track their completion. This application will also
    allow the user to share a webpage with the build process formatted in an attractive manner and generate
    a PDF version of that page for submission to competition judges. This project will be in the TALL stack.

## 2. Core Features
- List and describe the main features the project should have.
  User authentication
  User profile editing
  Project CRUD
  Task CRUD
  Material CRUD
  Media uploads and association with models
  TDD using Pest
  Sharable webpage for project build history
  PDF generation from rendered web page

## 3. Functional Requirements
- Detail the specific functionalities required for each feature.
  Users can log in and edit their profile with solid authentication
  Users can Create, View, Edit and Delete projects
  Users can Create, View, Edit and Delete tasks which are tied to projects
  Users can assign deadlines to tasks and change them
  Users can add a list of materials to a project and update these materials as they go
  Users can view a webpage representing a project that is publicly available
  Users can select which tasks and materials should show on the page
  Users can download a PDF created from this webpage

## 4. Non-Functional Requirements
  UI simple and intuitive using TALL stack
  Frontend components should adhere to common 508 accessability standards

## 5. Data Schemas
- Define the data models/entities used in the project.

- Entity: User
  - Description: Represents a registered user.
  - Fields:
    - id (string, unique identifier)
    - username (string, required, unique)
    - password (string, required, hashed)
    - email (string, required, unique)
    - created_at (datetime)
    - handle (string)
    - bio (longtext)

- Entity: Project
  - Description: Represents a project. Users can have many projects.
  - Fields:
    - id (string, unique identifier)
    - name (string, required)
    - Series (string)
    - Version (string)
    - created_at (datetime)
    - description (longtext)
    - share (boolean)

- Entity: Task
  - Description: Represents a task. Projects can have many tasks.
  - Fields:
    - id (string, unique identifier)
    - title (string, required)
    - created_at (datetime)
    - description (longtext)
    - share (boolean)
    - due_date (datetime)
    - completion_date (datetime)

- Entity: Material
  - Description: Represents a material used in a project. Projects can have many materials.
  - Fields:
    - id (string, unique identifier)
    - name (string, required)
    - created_at (datetime)
    - description (longtext)
    - share (boolean)
    - amount (string)
    - est_cost (integer)
    - actual_cost (integer)
    - source (string)
    - acquired (boolean)

- Entity: Note
  - Description: Represents a note made onto another model. Projects, Tasks, and Materials can have many notes.
  - Fields:
    - id (string, unique identifier)
    - content (string, required)
    - created_at (datetime)

- Media Library rules:
  -Projects have two collections, "main" and "references". Main contains one item, references can have unlimited images.
  -Tasks have one collection containing one image 'progress_image'
  -Images should all have a reasonable thumbnail size and a full image option.
  -Images should be restricted to web friendly formats.
  -No images are required.

## 6. Task Guidance
  All image uploads and management should be handled using Spatie Media Library
  PDF generation from an html template using Spatie's Browsershot 
  No validation of data in controllers, use Laravel's form requests
  We are building this TDD, any new work should have a test case created before starting on creating the code
  We are building this API first, the entire backend will be built before building web pages. We will test the api routes via Pest
  All new models should also have a factory and seeder so we can properly test and seed data
  For the frontend, we build using compoent based archetecture. All major sections should be contained in their own component.
  As much as possible, use Tailwind for styling frontend components
  This project was created via Herd and is being developed on a windows machine using powershell

## 7. Implementation Status

### âœ… Completed (Backend API)
- User authentication (login, register, profile management)
- Project CRUD with API endpoints and tests
- Task CRUD with API endpoints and tests  
- Material CRUD with API endpoints and tests
- Notes polymorphic relationships with API endpoints and tests
- All models have factories and seeders
- TDD implementation with Pest tests
- API documentation updated and current
- Form request validation for all endpoints
- Laravel Sanctum authentication

### ðŸ”„ In Progress / Next Steps
- Frontend implementation using TALL stack
- Component-based architecture with Tailwind CSS
- 508 accessibility compliance
- Media uploads via Spatie Media Library (will be implemented during frontend development)
- PDF generation via Spatie Browsershot (requires frontend views first)

### ðŸ“‹ Open Questions / Clarifications Needed
- Media upload permissions and file type restrictions
- PDF template design and customization options
- Public sharing URL structure and security
- Competition submission format requirements

## Dashboard Layout basics
|-----------------|
|  | Header area  |
|  | info area    |
|  | Section tabs |
|  | Content area |
|  | Buttons      |
|-----------------|
 - Sidebar contains a "Projects" section with the most recent 10 projects listed underneath and a "view all" that links to
    a card based, paginated view of all projects. This facillitates clicking directly to the most recent projects directly from
    the sidebar.
 - Sidebar also contains a profile editing link like standard Livewire sites along with the logout option.
 - On single project view page, the sections are as follows:
    - Header has the main (hero) image as a background image oriented to the right and with a fade out effect towards the left. To the 
      left is the Project Title, Series, Version, and a checkbox reflective of the share bool that can be checked 
      to control this value.
    - Info area contains the desciption to the left, and a scrollable area to the right containing the notes associated with this 
      project along with a button to add a new note which will open a reuasble modal component for adding a note to this project.
    - For the Section tabs, we will have three tab buttons to control the content area. These tab sections will be Tasks, Materials, 
      and Reference Images. These tabs should render without a page refresh.
    - For the content areas controlled via tabs, the layouts are as follows:
      - Tasks will have the tasks layed out in a columnar format in cards, to the far left is the image thumbnail if it exists,
      then to the right of that the content area, then the far right is the edit and delete buttons which will open a confirm delete 
      modal or an edit task modal. The content area in the center has three rows, with the title first, description below, then below 
      that a row containing a date field that is editable for the due date, then a section for the completion date. if it is not 
      complete, it shows a "Completed?" checkbox, if it is comeplete, show the date it was completed, finally to the right side of 
      this row is a "Share?" checkbox. Along the top on the right of the tasks section should be an "Add New Task" that opens a create 
      task modal.
      - Materials will show all materials in a table format. This table have rows tall enough to show three rows of text for the 
      description. The table rows should be Title, description, amount, source, cost (which should have the est cost and actual cost stacked 
      in their row), acquired (rows contain checkboxes that can be updated directly from the table), and stacked buttons for edit and delete.
      Like the Tasks, delete should show a confirm modal and edit should open an edit modal. The bottom row of the table should have an area 
      for sums of the est cost and actual cost values and a percentage value totaling the percent of items acquired.
      - The Reference Images section should have the images in a card format that can be clicked to show the full image in a modal. The 
      cards should have an overlay button on the top right corner to delete an image that triggers a confirm delete modal. The top right 
      corner of this section should have an "Add Image" button. Under each image card should be a checkmark for "Share image" for that image.
      -For both Tasks and Materials, when a user clicks on their row/card, a section pops out below it, shifting the items below it down,
      showing all notes and a button to add another note to the item, using the same modal as the notes on projects.
  - The show all projects view should have the projects as cards in three wide columns with the main image as a faded background, then the 
    Title, Series, and Version alighned to the bottom of the card.
  - The buttons area should have a button that links to the web view of the project (design forthcoming) and a a Download as PDF button 
    (also forthcoming).
  - Modals: Add/Edit Notes, Add/Edit Tasks. Add/Edit Materials, Add Reference Images, Confirm Delete, Edit Project. Simple form formatting
      with confirm and cancel buttons.
  - Tabs should be no-refresh, utilizing Alpine.js and be formatted as square buttons with clear atctive and hover states.
  - Major components: Sidebar, project card view, project cards, project show view, tasks, materials, reference images.
  - The color pallete should fit the default dark format using dark greys as a background and light text for all dashboard pages.
  - Keep all color contrasts appropriate to accessability.
  - All interactions must be keyboard accessable matching 508 standards.
---
